#include "imports/stdlib.fc";

() set_actions(cell action_list) impure asm "c5 POP";

const min_tons_for_storage = 500000000; ;; 0.005 TON

{-
  A simple proxy contract to send up to 255 internal actions at once. Useful for ton wallets versions less than v5 (v3r<X>, v4r<X>)
  IMPORTANT: this contract does not check action types. Owner can easily put a 'set_code' action and execute it. That is why the contract accepts actions ONLY from its owner.
-}
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  throw_if(0, in_msg_body.slice_empty?()); ;; ignore all empty messages

  slice cs = in_msg_full.begin_parse();
  if (cs~load_uint(4) & 1) { ;; resend all bounced messages to its owner
    throw_if(0, msg_value < min_tons_for_storage * 2);

    raw_reserve(min_tons_for_storage, 0);

    slice ds = get_data().begin_parse();
    slice owner_addr = ds~load_msg_addr();

    var msg = begin_cell()
      .store_uint(0x10, 6)
      .store_slice(owner_addr)
      .store_coins(0)
      .store_uint(0, 107);
    return send_raw_message(msg.end_cell(), 128); ;; carry remain balance
  }

  slice sender_addr = cs~load_msg_addr();

  slice ds = get_data().begin_parse();
  slice owner_addr = ds~load_msg_addr();

  throw_unless(403, equal_slices(sender_addr, owner_addr));

  cell actions = in_msg_body.preload_ref();
  return set_actions(actions);
}

slice get_proxy_owner_address() method_id {
  slice ds = get_data().begin_parse();
  return ds~load_msg_addr();
}
